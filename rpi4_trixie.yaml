---
steps:
  - mkimg: "{{ output }}"
    size: 16G

  - mklabel: msdos
    device: "{{ output }}"

  - mkpart: primary
    fs-type: 'fat32'
    device: "{{ output }}"
    start: 4MiB
    end: 512MiB
    tag: tag-firmware

  - mkpart: primary
    device: "{{ output }}"
    start: 512MiB
    end: 100%
    tag: tag-root

  - kpartx: "{{ output }}"

  - mkfs: vfat
    partition: tag-firmware
    label: RASPIFIRM

  - mkfs: ext4
    partition: tag-root
    label: RASPIROOT

  - mount: tag-root

  - mount: tag-firmware
    mount-on: tag-root
    dirname: '/boot/firmware'

  - unpack-rootfs: tag-root

  - debootstrap: trixie
    require_empty_target: false
    mirror: http://deb.debian.org/debian/
    target: tag-root
    arch: arm64
    components:
      - main
      - non-free-firmware
      - non-free
    unless: rootfs_unpacked

  - create-file: /etc/apt/sources.list
    contents: |+
      deb http://deb.debian.org/debian/ trixie main non-free-firmware non-free
      deb http://deb.debian.org/debian/ trixie-updates main non-free-firmware non-free
      deb http://security.debian.org/debian-security trixie-security main non-free-firmware non-free

    unless: rootfs_unpacked

  # Minimum Packages
  - apt: install
    packages:
      - ca-certificates
      - dosfstools
      - iw
      - parted
      - ssh
      - wpasupplicant
      - systemd-timesyncd
      - linux-image-arm64
      - raspi-firmware
      - firmware-misc-nonfree
      - firmware-brcm80211
      - bluez-firmware
      - python3
      - python3-apt
      - python3-dev
      - python3-venv
      - binutils
    tag: tag-root
    unless: rootfs_unpacked

  # Base Packages
  - apt: install
    packages:
      - sudo
      - zsh
      - eza
      - wmctrl
      - xdotool
      - libnotify-bin 
      - notify-osd
      - locales
      - file
      - acpi
      # - software-properties-common
      - build-essential
      - apt-transport-https
      - curl
      - wget 
      - dirmngr 
      - vim 
      - git
      - screen 
      - telnet 
      - bash-completion
      - linux-headers-arm64
      - net-tools
      - dnsutils
      - whois
      - bc
    tag: tag-root
    unless: rootfs_unpacked

  # Desktop Packages
  - apt: install
    packages:
      - i3
      - i3lock
      - i3blocks
      - network-manager-gnome
      - lightdm
      - picom
      - nautilus
      - dunst
      - rofi
      - kde-spectacle
      - arandr
      - firefox-esr
      - keepassxc
      - pulseaudio
      - pavucontrol
      - fastfetch
      - blueman
      - terminator
    tag: tag-root
    unless: rootfs_unpacked

  # Copy udev rules
  - copy-dir: /etc/udev/rules.d/
    src: rootfs/etc/udev/rules.d/
    unless: rootfs_unpacked

  # Copy dot config
  - copy-dir: /etc/skel/.config/
    src: rootfs/etc/skel/.config/
    unless: rootfs_unpacked

  - copy-file: /etc/skel/.p10k.zsh
    src: rootfs/etc/skel/.p10k.zsh
    perm: 0644
    unless: rootfs_unpacked

  - copy-file: /etc/skel/.zshrc
    src: rootfs/etc/skel/.zshrc
    perm: 0644
    unless: rootfs_unpacked

  - cache-rootfs: tag-root
    unless: rootfs_unpacked

  - shell: |
      echo "rpi4-$(date +%Y%m%d)" > "${ROOT?}/etc/hostname"
      echo "127.0.0.1\tlocalhost $(cat ${ROOT?}/etc/hostname)" > "${ROOT?}/etc/hosts"

      # Allow root logins locally with no password
      # sed -i 's,root:[^:]*:,root::,' "${ROOT?}/etc/shadow"

      install -m 644 -o root -g root rootfs/etc/fstab "${ROOT?}/etc/fstab"

      cp -r rootfs/usr/share "${ROOT?}/usr/"
      chown -R root:root "${ROOT?}/usr/share"

      install -m 644 -o root -g root rootfs/etc/network/interfaces.d/eth0 "${ROOT?}/etc/network/interfaces.d/eth0"
      install -m 600 -o root -g root rootfs/etc/network/interfaces.d/wlan0 "${ROOT?}/etc/network/interfaces.d/wlan0"

      install -m 755 -o root -g root rootfs/usr/local/sbin/rpi-set-sysconf "${ROOT?}/usr/local/sbin/rpi-set-sysconf"
      install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-set-sysconf.service "${ROOT?}/etc/systemd/system/"
      install -m 644 -o root -g root rootfs/boot/firmware/sysconf.txt "${ROOT?}/boot/firmware/sysconf.txt"
      mkdir -p "${ROOT?}/etc/systemd/system/basic.target.requires/"
      ln -s /etc/systemd/system/rpi-set-sysconf.service "${ROOT?}/etc/systemd/system/basic.target.requires/rpi-set-sysconf.service"

      install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-reconfigure-raspi-firmware.service "${ROOT?}/etc/systemd/system/"
      mkdir -p "${ROOT?}/etc/systemd/system/multi-user.target.requires/"
      ln -s /etc/systemd/system/rpi-reconfigure-raspi-firmware.service "${ROOT?}/etc/systemd/system/multi-user.target.requires/rpi-reconfigure-raspi-firmware.service"

      install -m 644 -o root -g root rootfs/etc/systemd/system/rpi-generate-ssh-host-keys.service "${ROOT?}/etc/systemd/system/"
      ln -s /etc/systemd/system/rpi-generate-ssh-host-keys.service "${ROOT?}/etc/systemd/system/multi-user.target.requires/rpi-generate-ssh-host-keys.service"
      rm -f "${ROOT?}"/etc/ssh/ssh_host_*_key*

      # NTP (timesyncd) + NetworkManager
      install -m 755 -o root -g root rootfs/etc/NetworkManager/dispatcher.d/10-update-timesyncd "${ROOT?}/etc/NetworkManager/dispatcher.d/10-update-timesyncd"

    root-fs: tag-root

  # Copy the relevant device tree files to the boot partition
  - chroot: tag-root
    shell: |
      install -m 644 -o root -g root /usr/lib/linux-image-*-arm64/broadcom/bcm*rpi*.dtb /boot/firmware/

  # Clean up archive cache (likely not useful) and lists (likely outdated) to
  # reduce image size by several hundred megabytes.
  # - chroot: tag-root
  #   shell: |
  #     apt-get clean
  #     rm -rf /var/lib/apt/lists

  # Modify the kernel commandline we take from the firmware to boot from
  # the partition labeled raspiroot instead of forcing it to mmcblk0p2.
  # Also insert the serial console right before the root= parameter.
  #
  # These changes will be overwritten after the hardware is probed
  # after dpkg reconfigures raspi-firmware (upon first boot), so make
  # sure we don't lose label-based booting.
  - chroot: tag-root
    shell: |
      sed -i 's/root=/console=ttyS1,115200 root=/' /boot/firmware/cmdline.txt
      sed -i 's#root=/dev/mmcblk0p2#root=LABEL=RASPIROOT#' /boot/firmware/cmdline.txt
      sed -i 's/^#ROOTPART=.*/ROOTPART=LABEL=RASPIROOT/' /etc/default/raspi*-firmware

      sed -i 's/cma=64M //' /boot/firmware/cmdline.txt

  # Clear /etc/machine-id and /var/lib/dbus/machine-id, as both should
  # be auto-generated upon first boot. From the manpage
  # (machine-id(5)):
  #
  #   For normal operating system installations, where a custom image is
  #   created for a specific machine, /etc/machine-id should be
  #   populated during installation.
  #
  # Note this will also trigger ConditionFirstBoot=yes for systemd.
  # On Buster, /etc/machine-id should be an emtpy file, not an absent file
  # On stable, /etc/machine-id should not exist in an image
  - chroot: tag-root
    shell: |
      rm -f /etc/machine-id /var/lib/dbus/machine-id
      echo "uninitialized" > /etc/machine-id

  # Create user and set nameserver for ansible
  - chroot: tag-root
    shell: |
      adduser user --shell /bin/zsh --gecos "user" --disabled-password
      echo "user:user" | chpasswd
      usermod -aG sudo user

  # Mount proc for ansible tasks
  - root-fs: tag-root
    shell: |
      mount -t proc proc $ROOT/proc

  - ansible: tag-root
    playbook: vmdb2-ansible.yaml

  - root-fs: tag-root
    shell: |
      umount $ROOT/proc

  # Create /etc/raspi-image-id to know, from what commit the image was built
  - chroot: tag-root
    shell: |
      echo "Build on $(date) by $USERNAME" > "/etc/raspi-image-id"
